// Generated by CoffeeScript 1.4.0
(function() {
  var Tonal;

  Tonal = (function() {
    var animate, animationSpeed, canvasHeight, canvasWidth, changeColours, changeElementColours, colourSpectrum, container, draw, elementBorderRadius, elementScale, elementSpacing, paper, randColour, runAnimation, timeouts, xNum, yNum;

    function Tonal() {}

    colourSpectrum = ['#eee', '#ccc', '#aaa', '#888', '#666', '#444', '#222'];

    animationSpeed = Math.ceil(1000 / 15);

    runAnimation = true;

    elementBorderRadius = 0;

    elementScale = 24;

    elementSpacing = 1;

    container = null;

    canvasWidth = null;

    canvasHeight = null;

    yNum = null;

    xNum = null;

    paper = null;

    timeouts = [];

    Tonal.prototype.init = function() {
      container = document.getElementById('tonal-container');
      canvasWidth = container.clientWidth;
      canvasHeight = parseInt(getComputedStyle(container)['height']);
      if (!canvasHeight) {
        document.body.style.overflow = 'hidden';
        canvasHeight = window.innerHeight;
      }
      xNum = Math.ceil(canvasWidth / (elementScale + elementSpacing));
      yNum = Math.ceil(canvasHeight / elementScale);
      paper = Raphael(container, canvasWidth, canvasHeight);
      draw();
      if (runAnimation) {
        return animate();
      }
    };

    Tonal.prototype.debug = function() {
      debugger;
    };

    Tonal.prototype.debouncer = function(func, timeout) {
      var timeoutID;
      timeout = timeout || 200;
      timeoutID = null;
      return function() {
        var args, scope;
        scope = this;
        args = arguments;
        clearTimeout(timeoutID);
        return timeoutID = setTimeout(function() {
          return func.apply(scope, Array.prototype.slice.call(args));
        }, timeout);
      };
    };

    Tonal.prototype.stopAndRedraw = function() {
      var i, _i, _len;
      if (runAnimation) {
        for (_i = 0, _len = timeouts.length; _i < _len; _i++) {
          i = timeouts[_i];
          clearTimeout(timeouts[i]);
        }
      }
      paper.remove();
      return tonal.init();
    };

    animate = function() {
      if (runAnimation) {
        return timeouts.push(setTimeout(function() {
          changeColours();
          return animate();
        }, animationSpeed));
      }
    };

    randColour = function() {
      return colourSpectrum[Math.round(Math.random() * (colourSpectrum.length - 1))];
    };

    changeElementColours = function(element) {
      var colour;
      colour = randColour();
      return element.attr({
        fill: colour,
        stroke: colour
      });
    };

    changeColours = function() {
      return paper.forEach(changeElementColours);
    };

    draw = function() {
      var i, j, xCoord, yCoord, _i, _j, _results;
      xCoord = 0;
      yCoord = elementSpacing;
      _results = [];
      for (i = _i = 0; 0 <= yNum ? _i < yNum : _i > yNum; i = 0 <= yNum ? ++_i : --_i) {
        for (j = _j = 0; 0 <= xNum ? _j < xNum : _j > xNum; j = 0 <= xNum ? ++_j : --_j) {
          changeElementColours(paper.rect(xCoord, yCoord, elementScale, elementScale, elementBorderRadius));
          xCoord += elementScale + elementSpacing;
        }
        xCoord = 0;
        _results.push(yCoord += elementScale + elementSpacing);
      }
      return _results;
    };

    return Tonal;

  })();

  (function(window) {
    var eventBindings, eventHandler, eventName, windowEvent, _results;
    window.tonal = new Tonal;
    eventBindings = {
      onload: tonal.init,
      onresize: tonal.debouncer(tonal.stopAndRedraw)
    };
    _results = [];
    for (eventName in eventBindings) {
      eventHandler = eventBindings[eventName];
      if (typeof window[eventName] !== 'function') {
        _results.push(window[eventName] = eventHandler);
      } else {
        windowEvent = window[eventName] || function() {};
        _results.push(window[eventName] = function() {
          windowEvent();
          return eventHandler();
        });
      }
    }
    return _results;
  })(this);

}).call(this);
